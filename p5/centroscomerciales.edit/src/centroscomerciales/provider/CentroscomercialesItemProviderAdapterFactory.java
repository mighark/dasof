/**
 */
package centroscomerciales.provider;

import centroscomerciales.util.CentroscomercialesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CentroscomercialesItemProviderAdapterFactory extends CentroscomercialesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CentroscomercialesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.CentroComercial} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CentroComercialItemProvider centroComercialItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.CentroComercial}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCentroComercialAdapter() {
		if (centroComercialItemProvider == null) {
			centroComercialItemProvider = new CentroComercialItemProvider(this);
		}

		return centroComercialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Planta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlantaItemProvider plantaItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Planta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlantaAdapter() {
		if (plantaItemProvider == null) {
			plantaItemProvider = new PlantaItemProvider(this);
		}

		return plantaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Tienda} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TiendaItemProvider tiendaItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Tienda}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTiendaAdapter() {
		if (tiendaItemProvider == null) {
			tiendaItemProvider = new TiendaItemProvider(this);
		}

		return tiendaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Restaurante} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestauranteItemProvider restauranteItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Restaurante}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestauranteAdapter() {
		if (restauranteItemProvider == null) {
			restauranteItemProvider = new RestauranteItemProvider(this);
		}

		return restauranteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Escalera} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EscaleraItemProvider escaleraItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Escalera}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEscaleraAdapter() {
		if (escaleraItemProvider == null) {
			escaleraItemProvider = new EscaleraItemProvider(this);
		}

		return escaleraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Ascensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AscensorItemProvider ascensorItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Ascensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAscensorAdapter() {
		if (ascensorItemProvider == null) {
			ascensorItemProvider = new AscensorItemProvider(this);
		}

		return ascensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Aseo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AseoItemProvider aseoItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Aseo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAseoAdapter() {
		if (aseoItemProvider == null) {
			aseoItemProvider = new AseoItemProvider(this);
		}

		return aseoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.EspacioAbierto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EspacioAbiertoItemProvider espacioAbiertoItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.EspacioAbierto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEspacioAbiertoAdapter() {
		if (espacioAbiertoItemProvider == null) {
			espacioAbiertoItemProvider = new EspacioAbiertoItemProvider(this);
		}

		return espacioAbiertoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Aparcamiento} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AparcamientoItemProvider aparcamientoItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Aparcamiento}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAparcamientoAdapter() {
		if (aparcamientoItemProvider == null) {
			aparcamientoItemProvider = new AparcamientoItemProvider(this);
		}

		return aparcamientoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.ZonaAparcamiento} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ZonaAparcamientoItemProvider zonaAparcamientoItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.ZonaAparcamiento}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createZonaAparcamientoAdapter() {
		if (zonaAparcamientoItemProvider == null) {
			zonaAparcamientoItemProvider = new ZonaAparcamientoItemProvider(this);
		}

		return zonaAparcamientoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Puerta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PuertaItemProvider puertaItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Puerta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPuertaAdapter() {
		if (puertaItemProvider == null) {
			puertaItemProvider = new PuertaItemProvider(this);
		}

		return puertaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link centroscomerciales.Salida} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SalidaItemProvider salidaItemProvider;

	/**
	 * This creates an adapter for a {@link centroscomerciales.Salida}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSalidaAdapter() {
		if (salidaItemProvider == null) {
			salidaItemProvider = new SalidaItemProvider(this);
		}

		return salidaItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (centroComercialItemProvider != null) centroComercialItemProvider.dispose();
		if (plantaItemProvider != null) plantaItemProvider.dispose();
		if (tiendaItemProvider != null) tiendaItemProvider.dispose();
		if (restauranteItemProvider != null) restauranteItemProvider.dispose();
		if (escaleraItemProvider != null) escaleraItemProvider.dispose();
		if (ascensorItemProvider != null) ascensorItemProvider.dispose();
		if (aseoItemProvider != null) aseoItemProvider.dispose();
		if (espacioAbiertoItemProvider != null) espacioAbiertoItemProvider.dispose();
		if (aparcamientoItemProvider != null) aparcamientoItemProvider.dispose();
		if (zonaAparcamientoItemProvider != null) zonaAparcamientoItemProvider.dispose();
		if (puertaItemProvider != null) puertaItemProvider.dispose();
		if (salidaItemProvider != null) salidaItemProvider.dispose();
	}

}
